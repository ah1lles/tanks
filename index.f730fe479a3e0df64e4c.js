(self.webpackChunktanks=self.webpackChunktanks||[]).push([[826],{647:(e,t,s)=>{"use strict";var i=s(3379),h=s.n(i),r=s(5426);h()(r.Z,{insert:"head",singleton:!1}),r.Z.locals;var n=s(3220),a=s.n(n),o=s(3311),d=s.n(o),l=s(7361),c=s.n(l);class u{constructor(){return u._instance||(this.cache=[],u._instance=this),u._instance}static getInstance(){return this._instance}async load(e){return this.cache=await Promise.all(a()(e).map((([e,t])=>this.loadItem(e,t))))}loadItem(e,t){return new Promise((s=>{const i=new Image;i.src=t,i.onload=()=>{s({[e]:i})}}))}get(e){return c()(d()(this.cache,e),e)}}const p=32,y=992,m=896,g=864;function x(e,t,s){return function(e,t,s){if(t.set)t.set.call(e,s);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=s}}(e,f(e,t,"set"),s),s}function f(e,t,s){if(!t.has(e))throw new TypeError("attempted to "+s+" private field on non-instance");return t.get(e)}var b=new WeakMap;class w{constructor(){return b.set(this,{writable:!0,value:void 0}),w._instance||(this.ctx=null,x(this,b,!1),w._instance=this),w._instance}static getInstance(){return this._instance}init(){if(function(e,t){return t.get?t.get.call(e):t.value}(this,f(this,b,"get")))return this.ctx;const e=document.createElement("canvas");return e.width=y,e.height=m,this.ctx=e.getContext("2d"),document.body.appendChild(e),x(this,b,!0),this.ctx}}var v=s(2569),S=s.n(v);function k(e,t){return function(e,t){return t.get?t.get.call(e):t.value}(e,T(e,t,"get"))}function T(e,t,s){if(!t.has(e))throw new TypeError("attempted to "+s+" private field on non-instance");return t.get(e)}var C=new WeakMap;class A{constructor(){return C.set(this,{writable:!0,value:void 0}),A._instance||(t={},function(e,t,s){if(t.set)t.set.call(e,s);else{if(!t.writable)throw new TypeError("attempted to set read only private field");t.value=s}}(e=this,T(e,C,"set"),t),A._instance=this),A._instance;var e,t}static getInstance(){return this._instance}subscribe(e,t){k(this,C)[e]||(k(this,C)[e]=[]),k(this,C)[e].push(t)}dispatch(e,t){const s=k(this,C)[e];s&&s.forEach((s=>s({type:e,data:t})))}unsubscribe(e,t){let s=k(this,C)[e];s=S()(s,t),s.length||delete k(this,C)[e]}}const _=s.p+"045664293dfc82faaa4b87632912c789.mp3",P=s.p+"fb0cb09ed5ee7dfa2f167ac3e472f0c3.mp3",E=s.p+"bc633894543c4eb9e2a9efb9ee06aa50.mp3",L=s.p+"116940a81cfba54d9979055e622d1b81.mp3",B=s.p+"754c4690d25f7901929ed944c4c1288f.mp3",D=s.p+"0246e1effa96d92c5abc5a08e8aea287.mp3",I=s.p+"98691f417fea1c0f8736a8fc9b4b768e.mp3",O=s.p+"b9f50b81dfc46da09b1e987cae3269ea.mp3",H=s.p+"ac336dd10cf66357ba07f2dfceb8db69.mp3",q=s.p+"1d38b7097f7647851e6509bd98c74629.mp3",F=s.p+"c5439878ef49c5d4d40fc45224c601b2.mp3",M=s.p+"626efebec78b5c0145d96d53f0b17710.mp3",z=s.p+"c7bdad24c8d55488cd1e8d15ac20e140.mp3",R=s.p+"3a175b20561962e8d2bfd0261f137a81.mp3",U=s.p+"26b864fd1773793a05f04c615488540a.mp3",G=s.p+"36319aa3dba40c767d6510886029b63e.mp3";class N{constructor(){return N._instance||(this.startLevel=new Audio(_),this.playerShoot=new Audio(P),this.bulletIsOutOfField=new Audio(E),this.enemyDied=new Audio(L),this.shootInArmoredEnemy=new Audio(B),this.playerDied=new Audio(D),this.bonusEnemyHitted=new Audio(I),this.bonusWasTaken=new Audio(O),this.increaseCountOfLives=new Audio(H),this.hitAndDestroyTile=new Audio(q),this.awaitingPlayer=new Audio(F),this.movingPlayer=new Audio(M),this.statsNumCount=new Audio(z),this.playerDefeat=new Audio(R),this.newScore=new Audio(U),this.pausePressed=new Audio(G),this.awaitingPlayer.loop=!0,this.awaitingPlayer.volume=.4,this.movingPlayer.loop=!0,this.movingPlayer.volume=.7,N._instance=this),N._instance}static getInstance(){return this._instance}play(e){this[e].currentTime=0,this[e].play()}pause(e){this[e].pause()}}var W=s(1763),K=s.n(W);class ${constructor(){}get assetsLoader(){return u.getInstance()}get dispatcher(){return A.getInstance()}get ctx(){return w.getInstance().ctx}get audioApi(){return N.getInstance()}after(e,t,s,i,h){let r=!1;const n=(e,...s)=>{n.timeCounter+=e,n.timeCounter>=n.timeDelay&&(i||(n.timeCounter=0),h?r||(r=!0,t(...s)):t(...s))};return n.timeCounter=K()(s)?s:0,n.timeDelay=e,n.resetTime=()=>{n.timeCounter=0},n}}class X{constructor(){}static collision(e,t){return X.collide(e.x,e.y,e.x+e.width,e.y+e.height,t.x,t.y,t.x+t.width,t.y+t.height)}static collide(e,t,s,i,h,r,n,a){return!(s<=h||e>=n||i<=r||t>=a)}static isInField(e){return e.x>=32&&e.y>=32&&e.x+e.width<=g&&e.y+e.height<=864}static setToStorage(e,t){localStorage.setItem(e,JSON.stringify(t))}static getFromStorage(e){const t=localStorage.getItem(e);return t?JSON.parse(t):null}}class Y extends ${constructor(e,t,s,i,h){super(),this.x=e,this.y=t,this.width=s,this.height=i,this.sprites=h,this.dy=0,this.zindex=0,this.idxSprite=0,this.destroyed=!1,this.destroyable=!1,this.passable=!0}get img(){return this.assetsLoader.get(this.currentSprite)}get currentSprite(){return this.sprites[this.idxSprite]}get dx(){return 0}get(){return[this.img,this.dx*this.width,this.dy,this.width,this.height,this.x,this.y,this.width,this.height]}checkFieldEnd(){return X.isInField(this)}render(){this.ctx.drawImage(...this.get())}destroy(){this.destroyable&&(this.destroyed=!0)}}class Z extends Y{constructor(...e){super(...e),this.type=""}get(){let[e,...t]=super.get();return this.destroyed&&this.destroyable&&(e=this.assetsLoader.get("transparent")),[e,...t]}}const J={1:{instant:class extends Z{constructor(...e){super(...e),this.type="bricks",this.passable=!1,this.destroyable=!0,this._dx=0}get dx(){return this._dx}set dx(e){this._dx=e}destroy(e){const t=e.direction;"player"===e.from&&this.audioApi.play("hitAndDestroyTile"),e.piercing?super.destroy():0===this.dx?("Up"===t&&(this.dx=4),"Right"===t&&(this.dx=1),"Down"===t&&(this.dx=2),"Left"===t&&(this.dx=3)):1===this.dx?("Up"===t&&(this.dx=14),"Right"===t&&super.destroy(),"Down"===t&&(this.dx=11),"Left"===t&&super.destroy()):2===this.dx?("Up"===t&&super.destroy(),"Right"===t&&(this.dx=11),"Down"===t&&super.destroy(),"Left"===t&&(this.dx=12)):3===this.dx?("Up"===t&&(this.dx=13),"Right"===t&&(super.destroy(),this.dx=11),"Down"===t&&(this.dx=12),"Left"===t&&super.destroy()):4===this.dx?("Up"===t&&super.destroy(),"Right"===t&&(this.dx=14),"Down"===t&&super.destroy(),"Left"===t&&(this.dx=13)):11!==this.dx&&12!==this.dx&&13!==this.dx&&14!==this.dx||super.destroy()}},sprites:["bricks"]},2:{instant:class extends Z{constructor(...e){super(...e),this.passable=!1,this.destroyable=!0}destroy(e){e.piercing?("player"===e.from&&this.audioApi.play("hitAndDestroyTile"),super.destroy()):"player"===e.from&&this.audioApi.play("bulletIsOutOfField")}},sprites:["armor"]},3:{instant:class extends Z{constructor(...e){super(...e),this.type="tree",this.zindex=2}destroy(e){"player"===e.from&&this.audioApi.play("hitAndDestroyTile"),this.destroyed=!0}},sprites:["tree"]},4:{instant:class extends Z{constructor(...e){super(...e),this.type="water",this.passable=!1}},sprites:["water"]},5:{instant:class extends Z{constructor(...e){super(...e),this.type="ice"}},sprites:["ice"]}},j={1:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,2,2,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,2,2,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,2,2,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,2,2,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],2:[0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,2,2,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,2,2,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,2,2,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,2,2,1,1,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,3,3,0,0,0,0,1,1,0,0,0,0,2,2,0,0,0,0,1,1,3,3,1,1,2,2,3,3,0,0,0,0,1,1,0,0,0,0,2,2,0,0,0,0,1,1,3,3,1,1,2,2,3,3,3,3,0,0,0,0,0,0,1,1,0,0,0,0,2,2,0,0,3,3,0,0,0,0,3,3,3,3,0,0,0,0,0,0,1,1,0,0,0,0,2,2,0,0,3,3,0,0,0,0,0,0,1,1,1,1,1,1,3,3,3,3,3,3,2,2,0,0,0,0,3,3,1,1,0,0,0,0,1,1,1,1,1,1,3,3,3,3,3,3,2,2,0,0,0,0,3,3,1,1,0,0,0,0,0,0,0,0,2,2,3,3,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,2,2,3,3,1,1,0,0,1,1,0,0,1,1,0,0,1,1,0,0,2,2,1,1,0,0,2,2,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,2,2,1,1,0,0,2,2,0,0,1,1,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,2,2,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,1,1,2,2,1,1,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,1,1,0,0,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1,1,1,1,1,1,0,0,0,0,1,1,0,0,1,1,0,0,0,1,0,0,1,0,0,0,1,1,1,1,1,1,0,0],3:[0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,1,1,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,1,1,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,3,3,3,3,3,3,3,3,0,0,0,0,0,0,1,1,0,0,1,1,1,1,1,1,1,0,3,3,3,3,3,3,3,3,1,1,1,1,1,1,1,1,0,0,1,1,0,0,0,1,0,0,3,3,3,3,3,3,3,3,1,1,1,1,1,1,0,0,0,0,1,1,0,0,0,1,0,0,3,3,3,3,3,3,3,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,3,3,3,3,3,3,3,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,0,0,3,3,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,3,3,0,0,0,0,3,3,0,0,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,3,3,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,3,3,3,3,3,3,3,3,1,1,1,0,0,1,1,1,1,0,0,1,0,0,0,0,0,0,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,3,3,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,1,1,0,0,1,1,1,1,3,3,3,3,3,3,3,3,1,1,0,0,0,0,2,0,0,0,0,0,0,0,1,1,1,1,3,3,3,3,3,3,0,0,1,1,0,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,1,1,1,1,0,0,2,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,1,1,1,1,0,0,2,0,0,0,0,1,1,1,1,0,0,0,3,3,3,3,3,3,0,0,2,2,1,1,1,1,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0,2,2,1,1,1,1,0,0,0,0,0,1,0,0,1,0,0,0,1,1,0,0,0,0,0,0],4:[0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,0,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,0,0,3,3,3,3,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,3,3,3,3,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2,2,3,3,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,2,2,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,0,0,0,0,0,0,0,0,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,0,0,0,4,4,0,0,0,1,0,0,2,0,0,0,2,0,0,0,1,1,1,0,0,0,0,0,0,0,4,4,0,0,0,1,0,0,2,0,0,0,2,0,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,4,4,4,4,0,0,0,0,1,1,0,0,1,1,1,1,0,0,0,0,1,1,1,0,0,0,4,4,4,4,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,1,1,1,1,1,1,1,1,0,0,1,1,1,1,0,0,3,3,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,1,1,1,1,1,1,0,0,3,3,3,3,0,0,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,3,3,3,3,2,2,3,3,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,3,3,3,3,2,2,2,2,3,3,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,3,3,3,3,2,2],5:[0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,2,2,0,0,1,1,0,0,1,1,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,4,4,4,4,0,0,4,4,0,0,0,0,1,1,1,1,1,1,0,0,1,1,1,1,0,0,4,4,4,4,0,0,4,4,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,4,4,0,0,4,4,4,4,4,4,0,0,1,1,1,1,0,0,0,0,1,1,0,0,4,4,4,4,0,0,4,4,4,4,4,4,0,0,1,1,1,1,1,1,1,1,0,0,0,0,4,4,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,4,4,1,1,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,4,4,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,4,4,4,4,4,4,0,0,4,4,0,0,2,2,0,0,1,1,0,0,0,2,0,0,0,0,4,4,4,4,4,4,0,0,4,4,0,0,2,2,0,0,1,1,0,0,0,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,2,1,1,1,1,0,0,0,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,1,1,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0],6:[0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,3,3,3,3,0,0,0,0,0,0,0,0,1,0,0,2,0,0,1,0,0,0,0,0,0,0,0,1,3,3,1,0,0,1,3,3,0,0,1,0,0,2,0,0,1,0,0,0,0,0,0,0,0,1,3,3,1,0,0,1,3,3,0,0,1,0,0,2,0,0,1,0,0,0,1,1,0,0,0,1,3,3,1,0,0,1,3,3,0,0,1,0,0,2,0,0,1,0,0,0,1,1,0,0,0,1,3,3,1,0,0,1,3,3,0,0,1,1,0,0,0,0,1,1,0,0,2,2,0,0,1,1,3,3,0,0,1,1,3,3,0,0,1,1,0,0,0,0,1,1,0,0,2,2,0,0,1,1,3,3,0,0,1,1,3,3,0,0,0,0,0,0,0,1,2,2,0,0,1,1,0,0,1,1,2,0,0,0,3,3,3,3,0,0,0,0,0,0,0,1,0,0,0,0,1,1,0,0,0,0,2,0,0,0,3,3,3,3,1,1,1,1,1,0,0,0,0,0,3,3,1,1,3,3,0,0,0,0,0,1,1,1,1,1,1,1,1,1,1,0,0,0,0,0,3,3,1,1,3,3,0,0,0,0,0,1,1,1,1,1,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,3,3,3,3,3,3,1,0,0,0,0,0,0,0,0,0,2,2,1,1,1,1,0,0,1,1,3,3,3,3,3,3,1,1,0,1,1,1,1,1,2,2,2,2,1,1,1,1,0,0,0,0,3,3,3,3,3,3,0,0,0,1,1,1,1,1,2,2,2,2,2,2,2,2,0,0,0,0,0,0,3,3,0,0,0,0,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,1,1,0,0,3,3,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,0,0,0,0,1,1,0,0,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,1,1,1,0,0,0,0,0,1,1,0,0,1,1,0,0,0,0,0,1,1,1,3,3,0,0,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,3,3,0,0,0,0,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,3,3,3,3,3,3,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,3,3,3,3,0,0,0,0,1,1,0,0,0,0,0,1,0,0,1,0,0,0,0,0,1,1,3,3,3,3],7:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,3,3,0,0,2,2,2,2,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,0,0,3,3,0,0,0,0,2,2,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,3,3,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,3,3,2,2,0,0,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,3,3,2,2,2,2,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,3,3,2,2,2,2,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2,0,0,3,3,2,2,2,2,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,2,2,0,0,3,3,2,2,2,2,2,2,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,2,0,0,2,2,2,2,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,2,0,0,2,2,2,2,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,2,0,0,0,0,0,0,0,2,2,0,0,2,2,2,2,2,2,0,0,0,0,0,2,0,0,2,0,0,0,0,0,0,0,2,2,0,0,2,2,2,2,2,2,0,0,0,0,0,2,0,0,0,0,0,2,2,2,0,0,0,0,0,0,2,2,2,2,3,3,0,0,0,0,2,2,0,0,0,0,0,2,2,2,0,0,0,0,0,0,2,2,2,2,3,3,0,0,0,0,2,2,0,0,0,0,2,2,0,0,0,0,0,0,0,0,2,2,3,3,0,0,0,0,2,2,2,2,0,0,0,0,2,2,0,0,0,0,0,0,0,0,2,2,3,3,0,0,0,0,2,2,2,2,0,0,0,0,2,2,2,2,2,2,0,0,0,0,3,3,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,3,3,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,2,2,0,0,0,0,2,2,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0,2,2,2,2,0,0,0,0,0,0,0,1,0,0,1,0,0,0,0,0,0,0,0,0,0,0]};var Q=s(1966),V=s.n(Q),ee=s(3105),te=s.n(ee);class se extends Y{constructor(e,...t){super(...t),this.speed=e||100,this.type="",this._x=this.x,this._y=this.y,this.direction="Down",this.imgPositions={Up:0,Right:1,Down:2,Left:3},this.upgrade=0,this.idxSprite=0,this.shootDelay=50,this.nextShootTime=50,this.nextShootCoef=200,this.dischargeTime=50,this.dischargeCoef=180,this.bulletsCount=0,this.maxBullets=1,this.bulletType="slow",this.canTakeBonus=!1,this.bulletPiercing=!1,this.destroyed=!1,this.destroyable=!0,this.passable=!1,this.appearing=!0,this.frozen=!1,this.indestructible=!1,this.helmetsCount=0,this.zindex=1}get dx(){return this.imgPositions[this.direction]}get maxBullets(){return this.upgrade>1?2:1}set maxBullets(e){}get bulletType(){return this.upgrade>0?"fast":"slow"}set bulletType(e){}get bulletPiercing(){return this.upgrade>2}set bulletPiercing(e){}get canDestroyTrees(){return this.upgrade>3}set canDestroyTrees(e){}get nextShootCoef(){return this.upgrade>1?300:200}set nextShootCoef(e){}get dischargeCoef(){return this.upgrade>1?220:180}set dischargeCoef(e){}canShoot(){return this.bulletsCount<this.maxBullets&&this.nextShootTime>=this.shootDelay&&this.dischargeTime>=this.shootDelay&&!this.destroyed}shoot(){this.canShoot()&&(this.createBullet(),this.addBullet())}createBullet(){this.dispatcher.dispatch("createBullet",{...this.getBulletStartPosition(),host:this,from:this.bulletFrom,type:this.bulletType,piercing:this.bulletPiercing,canDestroyTrees:this.canDestroyTrees,direction:this.direction})}addBullet(){this.bulletsCount<this.maxBullets&&(this.nextShootTime=0,this.bulletsCount++)}shouldDischarge(){return 0===this.bulletsCount}removeBullet(){this.bulletsCount>0&&(this.bulletsCount--,this.shouldDischarge()&&(this.dischargeTime=0))}createExplosion(){this.dispatcher.dispatch("createExplosion",{framesCount:8,x:this.x-p,y:this.y-p,width:128,height:128,sprites:["explosion2"]})}getBulletStartPosition(){let e,t;switch(this.direction){case"Up":e=this.x+this.width/2-8,t=this.y-16;break;case"Down":e=this.x+this.width/2-8,t=this.y+this.height;break;case"Right":e=this.x+this.width,t=this.y+this.height/2-8;break;case"Left":e=this.x-16,t=this.y+this.height/2-8}return{x:e,y:t}}balancePosition(){this.x=Math.round(this.x/p)*p,this.y=Math.round(this.y/p)*p}changeDirection(e){this.direction!==e&&this.balancePosition(),this.direction=e}checkCollission(e,t,s,i,h){return X.collide(e,t,s,i,h.x,h.y,h.x+h.width,h.y+h.height)}checkTilesCollision(e){return!!d()(e,(e=>X.collision(e,this)))}checkHeadquartersCollision(e){return e&&!e.destroyed&&X.collision(e,this)}checkOtherTanksCollision(e,t){let s=this.x,i=this.y,h=this.x+this.width,r=this.y+this.height;return!!d()(te()(V()(e,[this]),{appearing:!1}),(e=>"Up"===this.direction?this.checkCollission(s,i-2*t,h,r,e):"Right"===this.direction?this.checkCollission(s+2*t,i,h,r,e):"Left"===this.direction?this.checkCollission(s-2*t,i,h,r,e):"Down"===this.direction?this.checkCollission(s,i+2*t,h,r,e):void 0))}reactOnCollidion(e){this.balancePosition()}upgradeTank(){this.canTakeBonus&&this.upgrade++}maxUpgradeTank(){this.canTakeBonus&&(this.upgrade=4)}increaseAmountOfLives(){}freezeTank(){this.frozen=!0}unfreezeTank(){this.frozen=!1}makeTankIndestructible(){this.helmetsCount++,this.helmetsCount>0&&(this.indestructible=!0)}makeTankDestructible(){this.helmetsCount=this.helmetsCount>0?this.helmetsCount-1:0,0===this.helmetsCount&&(this.indestructible=!1)}handleOtherTankCollision(e,t){const s=this.checkOtherTanksCollision(e,t);return s?!this.appearing&&s:(this.appearing=!1,s)}change(e){switch(this.direction){case"Up":this.y-=e;break;case"Right":this.x+=e;break;case"Down":this.y+=e;break;case"Left":this.x-=e}}changePosition(e,t,s,i){if(this.checkTilesCollision(s)||!this.checkFieldEnd()||this.checkHeadquartersCollision(i))return this.balancePosition();let h=this.speed*e;this.handleOtherTankCollision(t,h)?this.reactOnCollidion(e):this.change(h),this._x=this.x,this._y=this.y}update(e,...t){this.frozen||(this.changePosition(e,...t),this.nextShootTime+=this.nextShootCoef*e,this.dischargeTime+=this.dischargeCoef*e)}destroy(){this.indestructible||(super.destroy(),this.createExplosion())}}var ie=s(9704),he=s.n(ie),re=s(2628),ne=s.n(re),ae=s(4721),oe=s.n(ae);class de extends se{constructor(e,t,s,...i){super(...i),this.id=e,this.type="player",this.keys=t,this.lives=s,this.direction="Up",this.upgrade=0,this.maxUpgrade=4,this.keysPressed={},this.appearing=!1,this.bulletFrom="player",this.restoreDelay=1.25,this.isOver=!1,this.canTakeBonus=!0,this.startPositionX=this.x,this.startPositionY=this.y,this.movingSoundEnabled=!1,this.spawnAnimationCreated=!1,this.destroyed=!0,this.score=0,this.pointsForFreeLife=2e4,this.pointsCounter=this.pointsForFreeLife,this.lostControls=!1,this.restore=this.after(this.restoreDelay,(()=>this.restorePlayer())),this.destroying=this.after(3,(()=>this.dispatcher.dispatch("playerDestroyed")),null,!1,!0),document.addEventListener("keydown",(e=>this.keyDownHandler(e.code))),document.addEventListener("keyup",(e=>this.keyUpHandler(e.code)))}get upgrade(){return this.idxSprite}set upgrade(e){this.idxSprite=e>this.maxUpgrade?this.maxUpgrade:e}get nextShootCoef(){return this.upgrade>1?350:400}set nextShootCoef(e){}get dischargeCoef(){return this.upgrade>1?250:400}set dischargeCoef(e){}get lostControls(){return this._lostControls}set lostControls(e){this._lostControls!==e&&e&&(this.audioApi.pause("awaitingPlayer"),this.audioApi.pause("movingPlayer")),this._lostControls===e||e||this.audioApi.play("awaitingPlayer"),this._lostControls=e}keyDownHandler(e){this.checkKey(e)&&!this.lostControls&&("Attack"!==this.keys[e]&&(this.keysPressed[this.keys[e]]=!0),"Down"!==this.keys[e]&&"Up"!==this.keys[e]||(this.keysPressed.Left=!1,this.keysPressed.Right=!1),"Right"!==this.keys[e]&&"Left"!==this.keys[e]||(this.keysPressed.Up=!1,this.keysPressed.Down=!1),"Attack"===this.keys[e]?this.shoot():this.changeDirection(this.keys[e]),this.movingSoundControl())}keyUpHandler(e){this.checkKey(e)&&(this.keysPressed[this.keys[e]]=!1,this.movingSoundControl())}addScore(e){this.score+=e,this.pointsCounter-=e,this.pointsCounter<=0&&(this.pointsCounter=this.pointsForFreeLife,this.increaseAmountOfLives(),this.audioApi.play("increaseCountOfLives"))}movingSoundControl(){this.isPressedMovingKeys()?!this.movingSoundEnabled||this.destroyed||this.isOver||this.lostControls||(this.movingSoundEnabled=!1,this.audioApi.pause("awaitingPlayer"),this.audioApi.play("movingPlayer")):this.movingSoundEnabled||this.destroyed||this.isOver||this.lostControls||(this.movingSoundEnabled=!0,this.audioApi.pause("movingPlayer"),this.audioApi.play("awaitingPlayer"))}createSpawnAnimation(){this.spawnAnimationCreated||(this.spawnAnimationCreated=!0,this.dispatcher.dispatch("createSpawnAnimation",{duration:this.restoreDelay,spped:24,x:this.startPositionX,y:this.startPositionY}))}createBullet(){super.createBullet(),this.audioApi.play("playerShoot")}isPressedMovingKeys(){return he()(ne()(this.keysPressed))}shouldDischarge(){return this.upgrade>1?super.shouldDischarge()&&this.shootTime>this.shootDelay:super.shouldDischarge()}reactOnCollidion(e){this.isPressedMovingKeys()||super.reactOnCollidion(e)}checkKey(e){return oe()(Object.keys(this.keys),e)}increaseAmountOfLives(){this.lives++}changePosition(...e){this.isPressedMovingKeys()&&super.changePosition(...e)}updateForNewLevel(){this.destroyed=!0,this.x=this.startPositionX,this.y=this.startPositionY}restorePlayer(){this.appearing=!0,this.destroyed=!1,this.x=this.startPositionX,this.y=this.startPositionY,this.movingSoundEnabled=!0,this.spawnAnimationCreated=!1,this.dispatcher.dispatch("helmetBonusActivated",{entity:this,duration:3}),this.changeDirection("Up")}update(e,t,s,...i){this.lostControls=!(!t&&s),super.update(e,...i),this.destroyed&&!this.isOver&&s&&(this.createSpawnAnimation(),this.restore(e)),this.isOver&&this.destroying(e)}destroy(e){this.indestructible||(super.destroy(),this.audioApi.play("playerDied"),this.audioApi.pause("awaitingPlayer"),this.audioApi.pause("movingPlayer"),this.movingSoundEnabled=!1,0===this.lives?(this.isOver=!0,this.dispatcher.dispatch("setGameOver")):(this.lives--,this.upgrade=0))}}var le=s(5161),ce=s.n(le);class ue extends Y{constructor(e,t,s,i,h,r="Up",...n){super(...n),this.host=e,this.from=t,this.type=s,this.piercing=i,this.canDestroyTrees=h||!1,this.direction=r,this.passable=!1,this.destroyable=!0,this.zindex=1}get dx(){switch(this.direction){case"Up":return 0;case"Right":return 1;case"Down":return 2;case"Left":return 3;default:return 0}}get speed(){return"slow"===this.type?450:900}changePosition(e){switch(this.direction){case"Up":this.y-=this.speed*e;break;case"Right":this.x+=this.speed*e;break;case"Down":this.y+=this.speed*e;break;case"Left":this.x-=this.speed*e}}getOtherBullets(e){return te()(V()(e,[this]),(e=>"player"===e.from&&"player"===this.from||e.from!==this.from))}checkOtherBulletsCollision(e){return he()(ce()(e,(e=>X.collision(e,this))))}checkItemsCollision(e){return he()(ce()(e,(e=>{const t=X.collision(e,this);return t&&e.destroy(this),t})))}update(e,t,s,i,h,r){let n=!1;this.checkFieldEnd()?(this.checkItemsCollision(t)&&(n=!0),this.canDestroyTrees&&this.checkItemsCollision(r),this.checkOtherBulletsCollision(this.getOtherBullets(e))?n=!0:("player"===this.from&&this.checkItemsCollision([...s,...V()(i,[this.host])])&&(n=!0),"enemy"===this.from&&this.checkItemsCollision(i)&&(n=!0),h&&X.collision(h,this)&&!h.destroyed&&(h.destroy(),n=!0))):("player"===this.from&&this.audioApi.play("bulletIsOutOfField"),n=!0),n&&this.destroy()}destroy(){super.destroy(),this.dispatcher.dispatch("createExplosion",{framesCount:8,x:this.x-1.5*this.width,y:this.y-1.5*this.width,width:64,height:64,sprites:["explosion"]})}}class pe extends Y{constructor(e,t,...s){super(...s),this.idxOfSprite=e,this.idxSpriteTansparent=t,this.showSprite=!1,this.zindex=4,this.finished=!1,this.points=500,this.animation=this.after(.4,(()=>{this.showSprite=!this.showSprite}))}get dx(){return this.showSprite?this.idxSpriteTansparent:this.idxOfSprite}checkOthersCollision(e){const t=d()(e,(e=>e.canTakeBonus&&X.collision(e,this)));t&&this.destroy(t,te()(e,(e=>e.type!==t.type)))}setBunusEffect(){}update(e,t){this.animation(e),this.checkOthersCollision(t)}makeSound(){this.audioApi.play("bonusWasTaken")}destroy(e,t){this.setBunusEffect(e,t),this.makeSound(),"player"===e.type&&(this.dispatcher.dispatch("countPoints",{player:e,points:this.points}),this.dispatcher.dispatch("createPoints",{points:this.points,host:this})),this.finished=!0}}class ye extends pe{constructor(...e){super(...e),this.limit=20}setBunusEffect(e,t){this.dispatcher.dispatch("chovelBonusActivated",{limit:this.limit,host:e})}}class me extends pe{constructor(...e){super(...e),this.freezeLimit=10}setBunusEffect(e,t){this.dispatcher.dispatch("clockBonusActivated",{limit:this.freezeLimit,entities:t,bonusOwnerType:e.type})}}var ge=s(8894),xe=s.n(ge);class fe extends pe{constructor(...e){super(...e)}setBunusEffect(e,t){xe()(t,"destroy",null,!0)}}class be extends pe{constructor(...e){super(...e),this.duration=10}setBunusEffect(e,t){this.dispatcher.dispatch("helmetBonusActivated",{entity:e,duration:this.duration})}}class we extends pe{constructor(...e){super(...e)}makeSound(){this.audioApi.play("increaseCountOfLives")}setBunusEffect(e,t){e.increaseAmountOfLives()}}class ve extends pe{constructor(...e){super(...e)}setBunusEffect(e,t){e.maxUpgradeTank()}}class Se extends pe{constructor(...e){super(...e)}setBunusEffect(e,t){e.upgradeTank()}}var ke=s(3608),Te=s.n(ke),Ce=s(4238),Ae=s.n(Ce);class _e extends ${constructor(){super(),this.bonuses={1:{instance:be,sprite:["bonuses"]},2:{instance:me,sprite:["bonuses"]},3:{instance:ye,sprite:["bonuses"]},4:{instance:Se,sprite:["bonuses"]},5:{instance:fe,sprite:["bonuses"]},6:{instance:we,sprite:["bonuses"]},7:{instance:ve,sprite:["bonuses"]}}}genarateChance(){return Te()(100)}getIdxOfNewBonus(){const e=this.genarateChance();return e<=24?4:e<=48?5:e<=60?1:e<=72?2:e<=84?3:e<=96?6:e<=100?7:void 0}generateBonusPosition(){const e=Math.round(Te()(32,g)/p)*p,t=Math.round(Te()(32,864)/p)*p;return{x:e>800?800:e,y:t>800?800:t}}getTilesFromHeadquarters(e){return e?[{x:e.x,y:e.y,width:p,height:p},{x:e.x,y:e.y+p,width:p,height:p},{x:e.x+p,y:e.y,width:p,height:p},{x:e.x+p,y:e.y+p,width:p,height:p}]:[]}getBonusTilesPos(e){return[{x:e.x,y:e.y},{x:e.x+p,y:e.y},{x:e.x,y:e.y+p},{x:e.x+p,y:e.y+p}]}getTilesByBonusPos(e,t){return te()(e,(e=>!!d()(t,(t=>t.x===e.x&&t.y===e.y))))}getBonusPosition(e,t){const s=t||{},i=this.generateBonusPosition(),h=this.getBonusTilesPos(i),r=this.getTilesByBonusPos(e,h),n=te()(r,{passable:!1});return 4===Ae()(n)?this.getBonusPosition(e,s):(s.x=i.x,s.y=i.y,s)}create(e,t){const s=this.getIdxOfNewBonus(),i=this.bonuses[s],h=this.getTilesFromHeadquarters(t),r=this.getBonusPosition([...e,...h]);return new i.instance(s,0,r.x,r.y,64,64,i.sprite)}}var Pe=s(3674),Ee=s.n(Pe),Le=s(7493),Be=s.n(Le);class De extends se{constructor(e,t,...s){super(...s),this.bonus=t,this.type="enemy",this.canTakeBonus=e,this._idxSprite=0,this.upgrade=0,this.maxUpgrade=0,this.bulletFrom="enemy",this.idxBonusSprite=this.sprites.length-1,this.showBonusSprite=!1,this.moving=this.after(5,(()=>this.determineRandomDirection())),this.shooting=this.after(.5,(()=>this.shoutingDecision())),this.bonusAnimation=this.after(.2,(()=>{this.showBonusSprite=!this.showBonusSprite})),this.deadlock=this.after(.3,(()=>this.changeDirectionWhenLocked()))}get idxSprite(){return this.showBonusSprite&&this.bonus?this.idxBonusSprite:this._idxSprite}set idxSprite(e){this._idxSprite=e}generateChanceOfChangingDirection(){return Te()(100)}generateChanceOfShooting(){return Te()(100)}shoutingDecision(){this.generateChanceOfShooting()<50&&this.shoot()}determineRandomDirection(){this.generateChanceOfChangingDirection()<40&&(this.changeDirection(this.getNewPosition()),this.deadlock.resetTime())}getNewPosition(){const e=Be()(Ee()(this.imgPositions),this.direction);return e[Te()(Ae()(e)-1)]}createBonus(){this.bonus&&(this.bonus=!1,this.dispatcher.dispatch("createBonus"))}makeBonusSound(){this.bonus&&this.audioApi.play("bonusEnemyHitted")}tankIsLocked(){return this.y<this._y||this.y>this._y||this.x<this._x||this.x>this._x}changeDirectionWhenLocked(e){this.changeDirection(this.getNewPosition()),this.moving.resetTime()}reactOnCollidion(e){super.reactOnCollidion(),this.changeDirectionWhenLocked(e)}update(e,...t){this.frozen||(super.update(e,...t),this.checkFieldEnd()||this.deadlock(e),this.tankIsLocked()&&this.deadlock(e),this.moving(e),this.shooting(e),this.bonus&&this.bonusAnimation(e))}destroy(e,t){this.indestructible||(this.makeBonusSound(),this.audioApi.play("enemyDied"),t||this.createBonus(),"player"===e?.from&&(this.dispatcher.dispatch("countPoints",{player:e.host,points:this.points,enemyId:this.enemyId}),this.dispatcher.dispatch("createPoints",{points:this.points,host:this})),this.dispatcher.dispatch("enemyWasDestroyed"),super.destroy())}}class Ie extends De{constructor(...e){super(...e),this.enemyId=1,this.points=ze[this.enemyId]}}class Oe extends De{constructor(...e){super(...e),this.enemyId=2,this.points=ze[this.enemyId]}}class He extends De{constructor(...e){super(...e),this.enemyId=3,this.upgrade=2,this.points=ze[this.enemyId]}}var qe=s(1584),Fe=s.n(qe);class Me extends De{constructor(...e){super(...e),this.enemyId=4,this._idxSprite=3,this.points=ze[this.enemyId]}destroy(e,t){this.indestructible||(0===this._idxSprite||Fe()(t)&&t?super.destroy(e,t):(this.makeBonusSound(),this.audioApi.play("shootInArmoredEnemy"),this.createBonus(),this._idxSprite--))}}const ze={1:100,2:200,3:300,4:400},Re={0:["enemy_1","enemy_1_bonus"],1:["enemy_2","enemy_2_bonus"],2:["enemy_3","enemy_3_bonus"],3:["enemy_4_grade_4","enemy_4_grade_3","enemy_4_grade_2","enemy_4_grade_1","enemy_4_bonus"]};class Ue extends ${constructor(e,t,s){super(),this.hardMode=t,this.creationDelay=2.5,this.spawnAnimationDelay=1.25,this.completeLevelDelay=3,this.spawnAnimationCreated=!1,this.allEnemiesWereDestroyed=!1,this.enemiesCount=0,this.destroyedEnemyCount=0,this.currentEnemyIndex=0,this.level=s||1,this.maxEnemies=20,this.maxLivingEnemies=t?6:e||4,this.currentSpot=1,this.spots={0:{x:p,y:p},1:{x:416,y:p},2:{x:800,y:p}},this.bonusTanks=[3,10,17],this.levelEnemiesSequence={1:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1],2:[3,3,1,1,1,1,0,0,0,0,0,0,0,0,0,0,0,0,0,0],3:[0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,1,1,1,3,3],4:[2,2,2,2,2,2,2,2,2,2,1,1,1,1,1,0,0,3,3,3],5:[2,2,2,2,2,3,3,0,0,0,0,0,0,0,0,1,1,1,1,1],6:[2,2,2,2,2,2,2,1,1,0,0,0,0,0,0,0,0,0,3,3],7:[0,0,0,1,1,1,1,2,2,2,2,2,2,0,0,0,0,3,3,3]},this.enemiesClasses={0:Ie,1:Oe,2:He,3:Me},this.creationSpawnAnimation=this.after(this.spawnAnimationDelay,(()=>this.createSpawnAnimation()),this.spawnAnimationDelay),this.creationEnemy=this.after(this.creationDelay,(()=>this.createEnemy()),this.spawnAnimationDelay),this.allEnemiesDestroyed=this.after(this.completeLevelDelay,(()=>{this.allEnemiesWereDestroyed=!1,this.dispatcher.dispatch("levelCompleted")})),this.handlerEnemyDestroying=()=>{this.destroyedEnemyCount++,this.allEnemiesWereDestroyed=this.destroyedEnemyCount>=this.maxEnemies},this.dispatcher.subscribe("enemyWasDestroyed",this.handlerEnemyDestroying)}createSpawnAnimation(){this.spawnAnimationCreated=!0,this.dispatcher.dispatch("createSpawnAnimation",{duration:this.spawnAnimationDelay,spped:24,x:this.spots[this.currentSpot].x,y:this.spots[this.currentSpot].y})}createEnemy(){const e=this.levelEnemiesSequence[this.level][this.currentEnemyIndex];this.dispatcher.dispatch("createEnemy",new this.enemiesClasses[e](this.hardMode,oe()(this.bonusTanks,this.currentEnemyIndex),1===e?200:100,this.spots[this.currentSpot].x,this.spots[this.currentSpot].y,64,64,Re[e])),this.currentEnemyIndex++,this.currentSpot=this.currentSpot<2?this.currentSpot+1:0,this.spawnAnimationCreated=!1}update(e,t){Ae()(t)<this.maxLivingEnemies&&this.currentEnemyIndex<this.maxEnemies&&(this.spawnAnimationCreated||this.creationSpawnAnimation(e),this.creationEnemy(e)),this.allEnemiesWereDestroyed&&this.allEnemiesDestroyed(e)}destroy(){this.dispatcher.unsubscribe("enemyWasDestroyed",this.handlerEnemyDestroying)}}class Ge extends Y{constructor(e,t,s,i,...h){super(...h),this.speed=t||16,this.isInfinity=s||!1,this.framesCount=e,this.duration=i??10,this.animationTime=0,this.lifeTime=0,this.zindex=3,this.finished=!1}get dx(){const e=Math.floor(this.animationTime)%this.framesCount;return this.isInfinity?e>this.framesCount?0:e:this.animationTime>this.framesCount?this.framesCount:e}get(){let[e,...t]=super.get();return this.finished&&(e=this.assetsLoader.get("transparent")),[e,...t]}update(e){this.animationTime+=this.speed*e,this.lifeTime+=e,(!this.isInfinity&&Math.floor(this.animationTime)>=this.framesCount||this.isInfinity&&this.lifeTime>this.duration)&&this.destroy()}destroy(){this.finished=!0}}class Ne extends Ge{constructor(e,...t){super(...t),this.host=e,this.speed=1.5*this.speed,this.host?.makeTankIndestructible()}update(e){this.x=this.host.x,this.y=this.host.y,super.update(e)}destroy(){super.destroy(),this.host?.makeTankDestructible()}}class We extends Y{constructor(...e){super(416,800,64,64,["headquarters"]),this.destroyable=!0,this.passable=!1,this.gainHeadquarters=!1,this.savedHeadquartersTiles=[],this.newHeadquartersTiles=[],this.defensiveTiles=[{x:this.x-p,y:this.y+p},{x:this.x-p,y:this.y},{x:this.x-p,y:this.y-p},{x:this.x,y:this.y-p},{x:this.x+p,y:this.y-p},{x:this.x+64,y:this.y-p},{x:this.x+64,y:this.y},{x:this.x+64,y:this.y+p}],this.destroying=this.after(3,(()=>this.dispatcher.dispatch("headquartersDestroyed")),null,!1,!0),this.dispatchingGameOver=this.after(.1,(()=>this.dispatcher.dispatch("setGameOver")),null,!1,!0),this.dispatcher.subscribe("chovelBonusActivated",(e=>this.handleChovelBonusActivation(e.data)))}get dx(){return this.destroyed?1:0}createExplosion(){this.dispatcher.dispatch("createExplosion",{framesCount:8,x:this.x-p,y:this.y-p,width:128,height:128,sprites:["explosion2"]})}compareTilesByPosition(e,t){return!!d()(t,(t=>t.x===e.x&&t.y===e.y))}handleChovelBonusActivation({limit:e,host:t}){Ae()(this.newHeadquartersTiles)>0&&this.dispatcher.dispatch("returnBackHeadquartersTiles",{oldTiles:[],newTiles:this.newHeadquartersTiles}),"player"===t.type?this.newHeadquartersTiles=ce()(this.defensiveTiles,(e=>new J[2].instant(e.x,e.y,p,p,J[2].sprites))):this.newHeadquartersTiles=[],this.dispatcher.dispatch("buildNewHeadquartersTiles",{oldTiles:this.savedHeadquartersTiles,newTiles:this.newHeadquartersTiles}),this.gainHeadquarters=!0,this.activation=this.after(e,(()=>this.returnBack()))}returnBack(){this.gainHeadquarters=!1,this.dispatcher.dispatch("returnBackHeadquartersTiles",{oldTiles:this.savedHeadquartersTiles,newTiles:this.newHeadquartersTiles}),this.savedHeadquartersTiles=[],this.newHeadquartersTiles=[]}update(e,t){this.gainHeadquarters?this.activation(e):this.savedHeadquartersTiles=te()(t,(e=>this.compareTilesByPosition(e,this.defensiveTiles))),this.destroyed&&(this.dispatchingGameOver(e),this.destroying(e))}destroy(){super.destroy(),this.createExplosion(),this.audioApi.play("playerDied"),this.passable=!0}}class Ke extends Ge{constructor(...e){super(...e),this.zindex=0}}class $e extends ${constructor(){super(),this.currentLabel=0,this.hardMode=!1,this.playersCount=1,this.labels=[{x:400,y:500,name:"playersCount",value:1,text:()=>"1 player"},{x:400,y:600,name:"playersCount",value:2,text:()=>"2 player"},{x:400,y:700,name:"hardMode",value:null,text:()=>"hard-mode: "+(this.hardMode?"on":"off")}],this.pointer={x:300,y:this.labels[this.currentLabel].y,width:64,height:64},this.logo={x:230,y:150,width:540,height:210},this.keyDownHandler=({code:e})=>{switch(e){case"ArrowDown":this.currentLabel=this.currentLabel<Ae()(this.labels)-1?this.currentLabel+1:this.currentLabel;break;case"ArrowUp":this.currentLabel=this.currentLabel>0?this.currentLabel-1:0;break;case"Enter":const e=this.labels[this.currentLabel];"hardMode"===e.name?this.hardMode=!this.hardMode:"playersCount"===e.name&&(this.playersCount=e.value,this.dispatcher.dispatch("getStartSettings",{playersCount:this.playersCount,hardMode:this.hardMode}))}},document.addEventListener("keydown",this.keyDownHandler)}renderLogo(){this.ctx.drawImage(this.assetsLoader.get("battle_city"),this.logo.x,this.logo.y,this.logo.width,this.logo.height)}drawBackground(){this.ctx.fillStyle="#000",this.ctx.fillRect(0,0,y,m)}renderLabels(){this.labels.forEach((e=>{this.ctx.fillStyle="white",this.ctx.font="42px sans-serif",this.ctx.fillText(e.text(),e.x,e.y)}))}renderPointer(){this.ctx.drawImage(this.assetsLoader.get("tank_1"),this.pointer.width,0,64,64,this.pointer.x,this.labels[this.currentLabel].y-48,this.pointer.width,this.pointer.height)}render(){this.drawBackground(),this.renderLogo(),this.renderLabels(),this.renderPointer()}update(e){}destroy(){document.removeEventListener("keydown",this.keyDownHandler)}}class Xe extends ${constructor(e,t){super(),this.canChangeLevel=e||!1,this.level=t,this.startGame=!this.canChangeLevel,this.soundLauched=!1,this.starting=this.after(1.5,(()=>{this.startGame=!1,this.dispatcher.dispatch("chooseLevel",{level:this.level})})),this.keyDownHandler=({code:e})=>{this.startGame||("ArrowRight"===e&&(this.level=this.level<Ae()(j)?this.level+1:Ae()(j)),"ArrowLeft"===e&&(this.level=this.level>1?this.level-1:1),"Enter"!==e||this.startGame||(this.startGame=!0,this.makeSound()))},this.startGame&&this.makeSound(),document.addEventListener("keydown",this.keyDownHandler)}makeSound(){this.soundLauched||(this.audioApi.play("startLevel"),this.soundLauched=!0)}render(){this.ctx.fillStyle="#747474",this.ctx.fillRect(0,0,y,m),this.ctx.fillStyle="black",this.ctx.font="bold 42px sans-serif",this.ctx.fillText(`Level ${this.level}`,432,448)}update(e){this.startGame&&this.starting(e)}destroy(){document.removeEventListener("keydown",this.keyDownHandler)}}class Ye extends ${constructor(){super(),this.playersCount=1,this.lavelInfo={img:{x:896,y:736,width:64,height:64},value:{x:938,y:822}},this.livesInfo=[{text:{x:896,y:534},img:{x:896,y:544,width:p,height:p},value:{x:933,y:571}},{text:{x:896,y:630},img:{x:896,y:640,width:p,height:p},value:{x:933,y:667}}]}renderText(e,t,s,i,h){this.ctx.fillStyle=i||"black",this.ctx.font=h||"bold 32px sans-serif",this.ctx.fillText(e,t,s)}renderImg(e,t,s,i,h){this.ctx.drawImage(this.assetsLoader.get(e),t,s,i,h)}renderLevelInfo(){this.renderText(this.level,this.lavelInfo.value.x,this.lavelInfo.value.y),this.renderImg("level_icon",this.lavelInfo.img.x,this.lavelInfo.img.y,this.lavelInfo.img.width,this.lavelInfo.img.height)}renderLivesInfo(){this.playersLives.forEach(((e,t)=>{const s=this.livesInfo[t];this.renderText(`${t+1} P`,s.text.x,s.text.y),this.renderImg("lives_icon",s.img.x,s.img.y,s.img.width,s.img.height),this.renderText(e,s.value.x,s.value.y)}))}render(){this.renderLevelInfo(),this.renderLivesInfo()}update(e,t,s){this.playersLives=ce()(t,"lives"),this.level=s}}var Ze=s(3857),Je=s.n(Ze);class je extends ${constructor(){super(),this.store={},this.handleCountPoints=({data:e})=>{if(e.player.addScore(e.points),e.enemyId){const t=c()(this.store,`${this.level}.${e.player.id}.${e.enemyId}`)||0;this.store=Je()(this.store,{[this.level]:{[e.player.id]:{[e.enemyId]:t+1}}})}},this.dispatcher.subscribe("countPoints",this.handleCountPoints)}getStats(){return this.store}update(e,t){this.level=t}destroy(){this.dispatcher.unsubscribe("countPoints",this.handleCountPoints)}}class Qe extends Y{constructor(e,...t){super(...t),this.points=e,this.zindex=2,this.showing=this.after(1,(()=>this.destroy()))}render(){this.ctx.fillStyle="white",this.ctx.font="26px sans-serif",this.ctx.fillText(this.points,this.x+10,this.y+p+10)}update(e){this.showing(e)}destroy(){this.destroyed=!0}}var Ve=s(1175),et=s.n(Ve),tt=s(2297),st=s.n(tt),it=s(7287),ht=s.n(it),rt=s(711),nt=s.n(rt),at=s(1609),ot=s.n(at);class dt extends ${constructor(e,t,s){super(),this.playersIds=ce()(s,"id").sort(),this.stats=ot()(e)?{[t]:ht()(this.playersIds,ce()(this.playersIds,(e=>({}))))}:e,this.level=t,this.playersCount=Ae()(s),this.finish=!1,this.enemiesPoints={...ze},this.pattern={points:0,enemies:0},this.values=ht()(this.playersIds,ce()(this.playersIds,(e=>({})))),this.playersCurrentPoints=ht()(this.playersIds,ce()(s,"score")),this.totals=ht()(this.playersIds,ce()(this.playersIds,(e=>st()(ne()(this.stats[this.level]&&this.stats[this.level][e]),((e,t)=>e+t))||0))),this.shouldRenderTotals=!1,this.idx=0,this.needToChangeIdx={},this.bestScore=this.getBestScore(),this.row=this.after(1,(e=>this.updateRow(e)),null,!0),this.pointing=this.after(.2,(()=>this.updatePoints()),.2),this.finishing=this.after(3,(()=>this.dispatcher.dispatch("statsScreenFinished")),null,!1,!0)}getBestScore(){return X.getFromStorage("TheBestScore")||0}updateRow(e){this.playersIds.forEach((e=>{this.values[e][this.idx]||(this.values[e][this.idx]={...this.pattern})})),this.playersIds.forEach((e=>{this.stats[this.level]&&this.stats[this.level][e]&&this.stats[this.level][e][this.idx+1]||(this.needToChangeIdx[e]=!0)})),this.pointing(e)}checkRowIndex(){nt()(ne()(this.needToChangeIdx))&&Ae()(ne()(this.needToChangeIdx))===this.playersCount&&(this.row.resetTime(),this.idx++,this.needToChangeIdx={})}checkFinish(){this.idx>Ae()(Ee()(ze))-1&&(this.shouldRenderTotals=!0,this.finish=!0)}updatePoints(){this.playersIds.forEach((e=>{const t=this.stats[this.level]&&this.stats[this.level][e]&&this.stats[this.level][e][this.idx+1];this.values[e][this.idx].enemies!==t&&t?(this.values[e][this.idx].enemies++,this.values[e][this.idx].points+=ze[this.idx+1],this.audioApi.play("statsNumCount")):this.needToChangeIdx[e]=!0})),this.checkRowIndex(),this.checkFinish()}renderText(e,t,s,i,h){this.ctx.fillStyle=i||"white",this.ctx.font=h||"32px sans-serif",this.ctx.fillText(e,t,s)}renderBestScore(){this.renderText("The Best Score",250,100,"#de2800"),this.renderText(`${this.bestScore}`,600,100,"#ff9a39")}renderLevel(){this.renderText(`Level ${this.level}`,450,170)}renderPlayers(){this.playersIds.forEach((e=>{this.renderText(`${e} Player`,300*e,250,"#de2800"),this.renderText(`${this.playersCurrentPoints[e]}`,300*e,300,"#ff9a39")}))}renderEnemiesIcons(){let e=250;a()(this.enemiesPoints).forEach((([t,s],i)=>{e+=i+96;const h=this.assetsLoader.get(et()(Re[i])),r=this.assetsLoader.get("arrow_left");if(this.ctx.drawImage(h,0,0,64,64,464,e,64,64),this.ctx.drawImage(r,432,e+16,p,p),this.renderText("points",250,e+p+10),Ae()(this.playersIds)>1){const t=this.assetsLoader.get("arrow_right");this.ctx.drawImage(t,528,e+16,p,p),this.renderText("points",650,e+p+10)}}))}renderTotal(){this.renderText("Total",460,800),this.shouldRenderTotals&&this.playersIds.forEach((e=>{this.renderText(`${this.totals[e]}`,1===e?380:590,800)}))}renderParticularEnemyCount(){let e=295;const t={1:{pointsX:120,enemiesX:380},2:{pointsX:820,enemiesX:590}};this.playersIds.forEach((s=>{e=295,a()(this.values[s]).forEach((([i,h],r)=>{e+=r+96,this.renderText(`${h.points}`,t[s].pointsX,e),this.renderText(`${h.enemies}`,t[s].enemiesX,e)}))}))}render(){this.ctx.fillStyle="#000",this.ctx.fillRect(0,0,y,m),this.renderBestScore(),this.renderLevel(),this.renderPlayers(),this.renderEnemiesIcons(),this.renderTotal(),this.renderParticularEnemyCount()}update(e){this.finish&&this.finishing(e),this.idx<Ae()(Ee()(ze))&&!this.finish&&this.row(e,e)}}class lt extends ${constructor(){super(),this.soundLauched=!1,this.finishing=this.after(3,(()=>this.compare()),null,!1,!0)}makeSound(){this.soundLauched||(this.audioApi.play("playerDefeat"),this.soundLauched=!0)}getLastBestScore(){return X.getFromStorage("TheBestScore")}setUpNewScore(e){X.setToStorage("TheBestScore",e||0)}countPlayersScore(e){this.score=st()(ce()(e,"score"))}compare(){const e=this.getLastBestScore();!e||this.score>e?(this.setUpNewScore(this.score),this.dispatcher.dispatch("newScoreScreen",{score:this.score})):this.dispatcher.dispatch("startScreen")}render(){this.ctx.fillStyle="#000",this.ctx.fillRect(0,0,y,m),this.ctx.drawImage(this.assetsLoader.get("you_died"),300,300,385,237)}update(e,t){this.finishing(e),this.makeSound(),this.countPlayersScore(t)}}class ct extends ${constructor(e){super(),this.lifeTime=9,this.score=e,this.soundLauched=!1,this.finishing=this.after(9,(()=>this.dispatcher.dispatch("startScreen")),null,!1,!0),this.title=new Ge(2,null,!0,this.lifeTime,200,200,588,82,["new_score_title"]),this.symbols=[],this.symbolsMap={0:{width:78,height:82},1:{width:48,height:82},2:{width:64,height:82},3:{width:64,height:82},4:{width:80,height:82},5:{width:64,height:82},6:{width:74,height:82},7:{width:72,height:82},8:{width:74,height:82},9:{width:72,height:82}},this.buildSymbols()}buildSymbols(){let e=300;this.symbols=ce()(this.score.toString().split(""),(t=>{const s=this.symbolsMap[t],i=new Ge(2,null,!0,this.lifeTime,e,400,s.width,s.height,[`symbol_${t}`]);return e+=s.width+5,i}))}makeSound(){this.soundLauched||(this.audioApi.play("newScore"),this.soundLauched=!0)}render(e){this.ctx.fillStyle="#000",this.ctx.fillRect(0,0,y,m),this.title.render(e),xe()(this.symbols,"render",e)}update(e){this.title.update(e),xe()(this.symbols,"update",e),this.finishing(e),this.makeSound()}}class ut extends ${constructor(e,t){super(),this.text=e||"",this.shift=t||100,this.color="#b02203"}renderText(e,t,s,i){this.ctx.font=i||"bold 42px sans-serif",this.ctx.shadowColor="black",this.ctx.shadowBlur=7,this.ctx.lineWidth=5,this.ctx.strokeText(e,t,s),this.ctx.shadowBlur=0,this.ctx.fillStyle=this.color,this.ctx.fillText(e,t,s)}render(e){this.renderText(this.text,496-this.shift,428)}}class pt extends ${constructor(){super(),this.score=0,this.finishing=this.after(3,(()=>this.compare()),null,!1,!0)}getLastBestScore(){return X.getFromStorage("TheBestScore")}setUpNewScore(e){X.setToStorage("TheBestScore",e||0)}countPlayersScore(e){this.score=st()(ce()(e,"score"))}compare(){const e=this.getLastBestScore();!e||this.score>e?(this.setUpNewScore(this.score),this.dispatcher.dispatch("newScoreScreen",{score:this.score})):this.dispatcher.dispatch("startScreen")}render(e){this.ctx.fillStyle="#000",this.ctx.fillRect(0,0,y,m),this.ctx.drawImage(this.assetsLoader.get("the_end"),260,370,450,90)}update(e,t){this.finishing(e),this.countPlayersScore(t)}}var yt=s(9734),mt=s.n(yt),gt=s(7043),xt=s.n(gt),ft=s(8125),bt=s.n(ft);const wt={tank_1:s(1152),tank_2:s(9511),tank_3:s(4026),tank_4:s(2961),tank_5:s(1597),tank2_1:s(9107),tank2_2:s(4134),tank2_3:s(355),tank2_4:s(8588),tank2_5:s(1318),enemy_1:s(3933),enemy_2:s(9810),enemy_3:s(5620),enemy_4_grade_1:s(2071),enemy_4_grade_2:s(8473),enemy_4_grade_3:s(2290),enemy_4_grade_4:s(443),enemy_1_bonus:s(5329),enemy_2_bonus:s(4641),enemy_3_bonus:s(2368),enemy_4_bonus:s(7055),bonuses:s(1442),bricks:s(9301),armor:s(9683),tree:s(2525),water:s(4117),ice:s(7683),transparent:s(6293),level_icon:s(5171),lives_icon:s(3342),enemy_indicator:s(1740),bullet:s(3115),headquarters:s(955),explosion:s(2928),explosion2:s(3109),bonus_animation:s(8498),spawn_animation:s(2720),battle_city:s(5698),arrow_right:s(7623),arrow_left:s(3888),you_died:s(2270),new_score_title:s(3469),the_end:s(2801),symbol_0:s(809),symbol_1:s(5993),symbol_2:s(3454),symbol_3:s(5051),symbol_4:s(556),symbol_5:s(9695),symbol_6:s(1939),symbol_7:s(7741),symbol_8:s(976),symbol_9:s(6958)},vt=new u,St=new w,kt=(new A,new N,new class extends ${constructor(){super(),this.playerLives=2,this.level=1,this.pause=!1,this.pausePressed=!1,this.lastTime=0,this.playersCount=1,this.players=[],this.tiles=[],this.bullets=[],this.explosions=[],this.enemies=[],this.bonuses=[],this.helmetOverlays=[],this.enemyMarkers=[],this.spawnAnimations=[],this.bonusFactory=null,this.enemyFactory=null,this.headquarters=null,this.startScreen=null,this.levelScreen=null,this.statsScreen=null,this.theEndScreen=null,this.sidebarStats=null,this.hardMode=!1,this.freezeEntities=!1,this.freezingLimit=0,this.freezingTime=0,this.bonusOwnerType=null,this.gameStarted=!1,this.gameOver=!1,this.playersOptions={0:{keys:{ArrowUp:"Up",ArrowRight:"Right",ArrowDown:"Down",ArrowLeft:"Left",Space:"Attack"},lives:this.playerLives,speed:150,x:288,y:800,width:64,height:64,sprites:["tank_1","tank_2","tank_3","tank_4","tank_5"]},1:{keys:{KeyW:"Up",KeyD:"Right",KeyS:"Down",KeyA:"Left",KeyQ:"Attack"},lives:this.playerLives,speed:150,x:544,y:800,width:64,height:64,sprites:["tank2_1","tank2_2","tank2_3","tank2_4","tank2_5"]}}}init(){document.addEventListener("keydown",(e=>this.keyDownHandler(e.code))),this.dispatcher.subscribe("createBullet",(e=>this.handleBulletCreation(e.data))),this.dispatcher.subscribe("createExplosion",(e=>this.handleExplosionCreation(e.data))),this.dispatcher.subscribe("createEnemy",(e=>this.handleEnemyCreation(e.data))),this.dispatcher.subscribe("createBonus",(e=>this.handleBonusCreation())),this.dispatcher.subscribe("playerDestroyed",(e=>this.handlePlayerOrHeadquartersDestroying())),this.dispatcher.subscribe("headquartersDestroyed",(e=>this.handlePlayerOrHeadquartersDestroying())),this.dispatcher.subscribe("clockBonusActivated",(e=>this.handleClockBonusActivation(e.data))),this.dispatcher.subscribe("helmetBonusActivated",(e=>this.handleHelmetBonusActivation(e.data))),this.dispatcher.subscribe("buildNewHeadquartersTiles",(e=>this.handleUpdateNewHeadquarterTiles(e.data))),this.dispatcher.subscribe("returnBackHeadquartersTiles",(e=>this.handleReturnBackHeadquarterTiles(e.data))),this.dispatcher.subscribe("createSpawnAnimation",(e=>this.handleSpawnAnimationCreation(e.data))),this.dispatcher.subscribe("getStartSettings",(e=>this.handleGetStartSettings(e.data))),this.dispatcher.subscribe("chooseLevel",(e=>this.handleChoosingLevel(e.data))),this.dispatcher.subscribe("statsScreenFinished",(e=>this.handleStatsScreenFinishing())),this.dispatcher.subscribe("levelCompleted",(e=>this.handleLevelCompleted())),this.dispatcher.subscribe("createPoints",(e=>this.handlePointsCreation(e.data))),this.dispatcher.subscribe("startScreen",(e=>this.createStartScreen())),this.dispatcher.subscribe("newScoreScreen",(e=>this.createScoreScreen(e.data))),this.dispatcher.subscribe("setGameOver",(e=>this.checkGameOver())),window.addEventListener("focus",(()=>{this.pause&&!this.pausePressed&&this.gameStarted&&this.pauseGame(!1)})),window.addEventListener("blur",(()=>{!this.pause&&this.gameStarted&&this.pauseGame(!0)})),this.startScreen=new $e,this.lastTime=Date.now(),this.loop()}createStartScreen(){this.clear(),this.startScreen=new $e}createScoreScreen({score:e}){this.theEndScreen=null,this.newScoreScreen=new ct(e)}handleGetStartSettings({playersCount:e,hardMode:t}){this.statsPlayers&&this.statsPlayers.destroy(),this.statsPlayers=new je,this.playersCount=e,this.hardMode=t,this.startScreen.destroy(),this.startScreen=null,this.createPlayers(),this.levelScreen=new Xe(!0,1)}handleChoosingLevel({level:e}){this.level=e,this.start()}handleStatsScreenFinishing(){this.clear(),this.gameOver?this.gameOverScreen=new lt:(this.level++,this.level<=Ae()(j)?this.levelScreen=new Xe(!1,this.level):this.theEndScreen=new pt)}start(){this.resetBonuses(),this.clear(),this.players=te()(this.players,{isOver:!1}),this.gameStarted=!0,this.enemyFactory=new Ue(this.playersCount>1?6:4,this.hardMode,this.level),this.bonusFactory=new _e,this.headquarters=new We,this.sidebarStats=new Ye,this.createTiles(),this.updatePlayersForNewLevel(),this.createPlayerSpawnAnimations(),this.createEnemyMarkers()}clear(){this.tiles=[],this.bullets=[],this.explosions=[],this.enemies=[],this.bonuses=[],this.helmetOverlays=[],this.enemyMarkers=[],this.spawnAnimations=[],this.headquarters=null,this.statsScreen=null,this.levelScreen?.destroy(),this.levelScreen=null,this.enemyFactory?.destroy(),this.enemyFactory=null,this.gameOverScreen=null,this.newScoreScreen=null,this.gameOverPopup=null,this.theEndScreen=null}handleLevelCompleted(){this.gameOver||(this.clear(),this.gameStarted=!1,this.createStatsScreen())}updatePlayersForNewLevel(){xe()(this.players,"updateForNewLevel")}pauseGame(e){this.pause=e,this.pause?this.pausePressed&&this.audioApi.play("pausePressed"):(this.lastTime=Date.now(),this.loop()),this.pausePopup=this.pause?new ut("PAUSE"):null}keyDownHandler(e){"KeyP"===e&&(this.pausePressed=!this.pausePressed,this.pauseGame(this.pausePressed))}checkGameOver(){(Ae()(te()(this.players,{isOver:!0}))===Ae()(this.players)||this.headquarters.destroyed)&&(this.gameOver=!0,this.gameStarted=!1),this.gameOverPopup=this.gameOver?new ut("Game Over",150):null}handlePlayerOrHeadquartersDestroying(){this.gameOver&&!this.gameStarted&&(this.clear(),this.createStatsScreen())}handleBulletCreation(e){this.bullets.push(this.createBullet(e.host,e.from,e.type,e.piercing,e.canDestroyTrees,e.direction,e.x,e.y,16,16,["bullet"]))}handleExplosionCreation(e){this.explosions.push(this.createExplosion(e.framesCount,e.x,e.y,e.width,e.height,e.sprites))}handleSpawnAnimationCreation(e){this.spawnAnimations.push(new Ke(7,e.speed,!0,e.duration,e.x,e.y,64,64,["spawn_animation"]))}handlePointsCreation({points:e,host:t}){this.points.push(new Qe(e,t.x,t.y,t.width,t.height))}handleEnemyCreation(e){e.bonus&&(this.bonuses=[]),this.enemyMarkers=bt()(this.enemyMarkers),this.enemies.push(e)}handleBonusCreation(){Ae()(this.bonuses)>0&&(this.bonuses=[]),this.bonuses.push(this.bonusFactory.create(te()(this.tiles,{destroyed:!1}),this.headquarters))}handleClockBonusActivation({limit:e,bonusOwnerType:t}){this.freezeEntities=!0,this.freezingLimit=e,this.bonusOwnerType=t,this.freezing=this.after(e,(e=>{this.freezeEntities=!1,xe()(this[e],"unfreezeTank")}))}resetBonuses(){this.freezeEntities&&this.updateFreezingTime(this.freezingLimit),this.helmetOverlays=[]}resetFreezing(e){this.freezeEntities=!1,xe()(this[e],"unfreezeTank")}updateFreezingTime(e){if(!this.freezeEntities)return;const t="player"===this.bonusOwnerType?"enemies":"players";xe()(this[t],"freezeTank"),this.freezing(e,t)}createStatsScreen(){this.statsScreen||(this.statsScreen=new dt(this.statsPlayers.getStats(),this.level,this.players))}createEnemyMarkers(){let e=g,t=32;this.enemyMarkers=ce()(Array(20),((s,i)=>(i%2==0&&(e=g,t+=32),e+=p,new Y(e,t,p,p,["enemy_indicator"]))))}createPlayerSpawnAnimations(){this.players.forEach((e=>this.handleSpawnAnimationCreation({x:e.x,y:e.y,duration:1.25})))}handleHelmetBonusActivation({entity:e,duration:t}){this.helmetOverlays.push(new Ne(e,3,null,!0,t,e.x,e.y,e.width,e.height,["bonus_animation"]))}handleUpdateNewHeadquarterTiles({oldTiles:e,newTiles:t}){this.tiles=xt()(V()(this.tiles,e),t)}handleReturnBackHeadquarterTiles({oldTiles:e,newTiles:t}){this.tiles=xt()(V()(this.tiles,t),e)}createPlayer(e,t,s,i,h,r,n,a,o){return new de(e,t,s,i,h,r,n,a,o)}createPlayers(){this.players=ce()(Array(2===this.playersCount||1===this.playersCount?this.playersCount:1),((e,t)=>{const s=this.playersOptions[t];return this.createPlayer(t+1,s.keys,s.lives,s.speed,s.x,s.y,s.width,s.height,s.sprites)}))}createTiles(){const e=j[this.level];let t=0,s=0;this.tiles=[],e.forEach(((e,i)=>{i%26==0&&(t=0,s+=p),t+=p,e&&this.tiles.push(new J[e].instant(t,s,p,p,J[e].sprites))}))}createBullet(e,t,s,i,h,r,n,a,o,d,l){return new ue(e,t,s,i,h,r,n,a,o,d,l)}createExplosion(e,t,s,i,h,r){return new Ge(e,null,!1,0,t,s,i,h,r)}updateTiles(){this.tiles=te()(this.tiles,{destroyed:!1})}updateExplosions(e){this.explosions=te()(this.explosions,{finished:!1}),xe()(this.explosions,"update",e)}updatePlayers(e){xe()(this.players,"update",e,this.pause,this.gameStarted,[...this.enemies,...te()(this.players,{destroyed:!1})],te()(this.tiles,{passable:!1,destroyed:!1}),this.headquarters)}updateBullets(e){this.bullets=te()(this.bullets,(e=>(e.destroyed&&e.host?.removeBullet(),!e.destroyed))),xe()(this.bullets,"update",this.bullets,te()(this.tiles,{passable:!1,destroyable:!0,destroyed:!1}),this.enemies,te()(this.players,{destroyed:!1}),this.headquarters,te()(this.tiles,{type:"tree",destroyed:!1})),xe()(this.bullets,"changePosition",e)}updateEnemies(e){this.enemies=te()(this.enemies,{destroyed:!1}),xe()(this.enemies,"update",e,[...this.enemies,...te()(this.players,{destroyed:!1})],te()(this.tiles,{passable:!1,destroyed:!1}),this.headquarters)}updateBonuses(e){this.bonuses=te()(this.bonuses,{finished:!1}),xe()(this.bonuses,"update",e,[...te()(this.enemies,{destroyed:!1}),...te()(this.players,{destroyed:!1})])}updateHelmetOverlays(e){this.helmetOverlays=te()(this.helmetOverlays,{finished:!1}),xe()(this.helmetOverlays,"update",e)}updateHeadquarters(e){this?.headquarters?.update(e,te()(this.tiles,{destroyed:!1}))}updateSpawnAnimations(e){this.spawnAnimations=te()(this.spawnAnimations,{finished:!1}),xe()(this.spawnAnimations,"update",e)}updatePoints(e){this.points=te()(this.points,{destroyed:!1}),xe()(this.points,"update",e)}renderMap(){this.ctx.fillStyle="#747474",this.ctx.fillRect(0,0,y,m),this.ctx.fillStyle="#000",this.ctx.fillRect(32,32,832,832),this.ctx.save()}update(e){this.updateFreezingTime(e),this.updateTiles(),this.updatePlayers(e),this.updateEnemies(e),this.updateExplosions(e),this.updateBullets(e),this.updateBonuses(e),this.updateHelmetOverlays(e),this.updateHeadquarters(e),this.updateSpawnAnimations(e),this.updatePoints(e),this?.enemyFactory?.update(e,this.enemies),this?.startScreen?.update(e),this?.levelScreen?.update(e),this?.statsPlayers?.update(e,this.level),this?.sidebarStats?.update(e,this.players,this.level),this?.statsScreen?.update(e),this?.gameOverScreen?.update(e,this.players),this?.theEndScreen?.update(e,this.players),this?.newScoreScreen?.update(e)}render(e){this.renderMap(),xe()(mt()([...this.tiles,...te()(this.players,{destroyed:!1}),...this.enemies,...this.bullets,...this.explosions,...this.bonuses,...this.helmetOverlays,...this.enemyMarkers,...this.spawnAnimations,...this.points,this.headquarters,this.sidebarStats,this.startScreen,this.levelScreen,this.statsScreen,this.gameOverScreen,this.newScoreScreen,this.pausePopup,this.gameOverPopup,this.theEndScreen],(e=>e&&e.zindex)),"render",e)}loop(){window.requestAnimationFrame((()=>{const e=Date.now(),t=(e-this.lastTime)/1e3;this.update(t),this.render(t),this.lastTime=e,this.pause||this.loop()}))}});vt.load(wt).then((()=>{St.init(),kt.init()}))},5426:(e,t,s)=>{"use strict";s.d(t,{Z:()=>a});var i=s(4015),h=s.n(i),r=s(3645),n=s.n(r)()(h());n.push([e.id,"body {\n  margin: 0;\n}\ncanvas {\n  margin: auto;\n  display: block;\n}\n","",{version:3,sources:["webpack://./src/style.css"],names:[],mappings:"AAAA;EACE,SAAS;AACX;AACA;EACE,YAAY;EACZ,cAAc;AAChB",sourcesContent:["body {\n  margin: 0;\n}\ncanvas {\n  margin: auto;\n  display: block;\n}\n"],sourceRoot:""}]);const a=n},809:(e,t,s)=>{"use strict";e.exports=s.p+"8daa7a5c6713b89e7e18.png"},5993:(e,t,s)=>{"use strict";e.exports=s.p+"dea460103eadb0d9ac1b.png"},3454:(e,t,s)=>{"use strict";e.exports=s.p+"085b3845d2e7213da8d3.png"},5051:(e,t,s)=>{"use strict";e.exports=s.p+"7a52fba5729ef3e4b8c9.png"},556:(e,t,s)=>{"use strict";e.exports=s.p+"c399897842daf20ae84c.png"},9695:(e,t,s)=>{"use strict";e.exports=s.p+"eccd8755058164f16fd4.png"},1939:(e,t,s)=>{"use strict";e.exports=s.p+"5745dd59ec75db2454a9.png"},7741:(e,t,s)=>{"use strict";e.exports=s.p+"714d784b393caeac3e38.png"},976:(e,t,s)=>{"use strict";e.exports=s.p+"85d2a291d7f9f5049332.png"},6958:(e,t,s)=>{"use strict";e.exports=s.p+"40df5e96ad897f1b39b0.png"},9683:(e,t,s)=>{"use strict";e.exports=s.p+"1c2710c22890719b164e.png"},3888:(e,t,s)=>{"use strict";e.exports=s.p+"c997ec1891b79a080a02.png"},7623:(e,t,s)=>{"use strict";e.exports=s.p+"f3c910f6f2697010aeda.png"},5698:(e,t,s)=>{"use strict";e.exports=s.p+"a600cb1ea8864337315e.png"},8498:(e,t,s)=>{"use strict";e.exports=s.p+"4526a876656f7d595434.png"},1442:(e,t,s)=>{"use strict";e.exports=s.p+"96c5fd93070ad4a31ec2.png"},9301:(e,t,s)=>{"use strict";e.exports=s.p+"f7a498cd6bfbb2a20917.png"},3115:(e,t,s)=>{"use strict";e.exports=s.p+"411a595e4526f051285c.png"},3933:(e,t,s)=>{"use strict";e.exports=s.p+"a272305274428639e9e8.png"},5329:(e,t,s)=>{"use strict";e.exports=s.p+"4a457b67cf8bd587dca3.png"},9810:(e,t,s)=>{"use strict";e.exports=s.p+"3d8e0d48100bcb6a7546.png"},4641:(e,t,s)=>{"use strict";e.exports=s.p+"b43b4b15b9f05c9282b3.png"},5620:(e,t,s)=>{"use strict";e.exports=s.p+"0afbe7c7b72aa5138ec9.png"},2368:(e,t,s)=>{"use strict";e.exports=s.p+"0e71bdb035eae5e6fe60.png"},7055:(e,t,s)=>{"use strict";e.exports=s.p+"5108acdfd43c1d5ddaab.png"},2071:(e,t,s)=>{"use strict";e.exports=s.p+"65b0b80d049b40d9a263.png"},8473:(e,t,s)=>{"use strict";e.exports=s.p+"4d4505eaec28f704bfa1.png"},2290:(e,t,s)=>{"use strict";e.exports=s.p+"ba43e421567e8f29edb5.png"},443:(e,t,s)=>{"use strict";e.exports=s.p+"4d32aae15e52af92385e.png"},1740:(e,t,s)=>{"use strict";e.exports=s.p+"5830e8d53d8fab21a556.png"},2928:(e,t,s)=>{"use strict";e.exports=s.p+"a1aed3dc0e166d850c6e.png"},3109:(e,t,s)=>{"use strict";e.exports=s.p+"c67cda5e88e74d4afe62.png"},955:(e,t,s)=>{"use strict";e.exports=s.p+"34c8159fca67cae3c089.png"},7683:(e,t,s)=>{"use strict";e.exports=s.p+"8065b39f6da968ac9216.png"},5171:(e,t,s)=>{"use strict";e.exports=s.p+"181333c88619adf2d7ca.png"},3342:(e,t,s)=>{"use strict";e.exports=s.p+"99f40d0192548aab4f66.png"},3469:(e,t,s)=>{"use strict";e.exports=s.p+"cd1a84febeaacb1c746d.png"},2720:(e,t,s)=>{"use strict";e.exports=s.p+"3418bc8186869e9a19a6.png"},9107:(e,t,s)=>{"use strict";e.exports=s.p+"2e367f8e756e5d29f65f.png"},4134:(e,t,s)=>{"use strict";e.exports=s.p+"732e76e1c84d10b7c99c.png"},355:(e,t,s)=>{"use strict";e.exports=s.p+"eb4af83d07820cd3c0c3.png"},8588:(e,t,s)=>{"use strict";e.exports=s.p+"a0939cb0d2566feeb136.png"},1318:(e,t,s)=>{"use strict";e.exports=s.p+"92a711e8a9a689473043.png"},1152:(e,t,s)=>{"use strict";e.exports=s.p+"dd9ce7a41ecec10100a0.png"},9511:(e,t,s)=>{"use strict";e.exports=s.p+"64b226a36b417635df42.png"},4026:(e,t,s)=>{"use strict";e.exports=s.p+"88a1d17e9f0c0f6f15a7.png"},2961:(e,t,s)=>{"use strict";e.exports=s.p+"5a50c9264e45289894d5.png"},1597:(e,t,s)=>{"use strict";e.exports=s.p+"7e95e1205d339717ecec.png"},2801:(e,t,s)=>{"use strict";e.exports=s.p+"ddd98b71e29372f843a8.png"},6293:(e,t,s)=>{"use strict";e.exports=s.p+"4aa304c71a7ade9f962c.png"},2525:(e,t,s)=>{"use strict";e.exports=s.p+"879be3b90b72d79ccfe6.png"},4117:(e,t,s)=>{"use strict";e.exports=s.p+"2eda49658721dc776c0c.png"},2270:(e,t,s)=>{"use strict";e.exports=s.p+"f937ebd68b675047bec7.png"}},e=>{"use strict";e.O(0,[216],(()=>(647,e(e.s=647)))),e.O()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,